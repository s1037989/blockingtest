#!/usr/bin/perl

use Mojolicious::Lite;

my $me = 'http://localhost:3000';

print <<EOL;

[$$] Hello!  Welcome to the blocking test which provides demonstration and explanation regarding the differences betweek blocking and non-blocking operations in your Mojolicious web server.
To most effectively use and benefit from this tool, you will want to have several terminals open so that you can start the web server, compare the informational messages supplied by the web server terminal, and one or more terminals by which to fire of requests to the web server typically using curl but also concurrent requests using a tool like ApacheBench.

EOL

helper info => sub {
	my $self = shift;
	$self->app->log->info("[$$] ".MyApp::message(@_));
};

# e.g. perl blockingtest prefork -w 50 -c 1
get '/blocking/:sleep' => {sleep => 0} => sub {
	my $self = shift;
	my $max_clients = $::server->max_clients;
	my $workers = $::server->can('workers') ? $::server->workers : 1;
	if ( $workers == 1 ) { 
		$self->info('blocktest worker');
		return $self->render_not_found;
	}
	if ( $max_clients != 1 ) {
		$self->info('blocktest max_clients');
		return $self->render_not_found;
	}
	my $sleep = $self->param('sleep');
	$self->info('blocktest workers max_client', $workers, $max_clients);
	$self->info(<<EOT);
Now, stand by while I [$$] fetch another URL.\nI will block; nothing else will be done by me [$$] until I get a response from the URL I requested and I will then precede to render my response to you.
EOT
	my $sleeper = $self->ua->get("$me/$sleep" => json => {block=>1, caller=>$$})->res->json->{sleeper}; # Blocking...
	# Won't reach here until a response is supplied to get
	$self->info(<<EOT);
A response from the URL [$sleeper] fetched $sleep seconds ago has been returned to me [$$] and I am now rendering my response and releasing my blocked state.
EOT
	$self->render(text => $sleep);
};

# May benefit from preforking and having additional workers but this study is not about that
# Requires max_clients is sufficiently large (default is 1000 so just go with that)
# e.g. perl blockingtest daemon
get '/non-blocking/:sleep' => {sleep => 0} => sub {
	my $self = shift;
	my $max_clients = $::server->max_clients;
	my $workers = $::server->can('workers') ? $::server->workers : 1;
	if ( $workers == 1 && $max_clients == 1 ) { 
		$self->app->log->info("[$$] This route is disabled when served by a single-process worker or daemon and the maximum number of concurrent clients is 1 because multiple concurrent connections cannot be handled by a single process when there is an operation that blocks.");
		return $self->render_not_found;
	} elsif ( $workers == 1 && $max_clients > 1 ) {
		$self->app->log->info("[$$] When served by a single-process daemon please ensure that the maximum number of concurrent clients is at least as many as you expect concurrent connections.  For this study, because the routes fetch a URL from this app, please ensure that there are twice as many workers as your expected concurrent connections.");
	} elsif ( $workers > 1 && $max_clients == 1 ) { 
		$self->app->log->info("[$$] This route is disabled when served by a single-process worker or daemon and the maximum number of concurrent clients is 1 because multiple concurrent connections cannot be handled by a single process when there is an operation that blocks.");
		return $self->render_not_found;
	} elsif ( $workers > 1 && $max_clients > 1 ) {
		$self->app->log->info("[$$] When served by a single-process daemon please ensure that the maximum number of concurrent clients is at least as many as you expect concurrent connections.  For this study, because the routes fetch a URL from this app, please ensure that there are twice as many workers as your expected concurrent connections.");
	} else {
		if ( $max_clients == 1 ) {
			if ( $workers == 1 ) {
				$self->app->log->info("[$$] App is prefork'd -- This route is disabled when served by a single worker and the maximum number of concurrent clients is 1.");
				return $self->render_not_found;
			} elsif ( $workers > 1 ) {
				$self->app->log->info("[$$] App is prefork'd.  When served by workers with a maximum number of concurrent connections of 1, please ensure that there are as many workers as you expect concurrent connections.  For this study, because the routes fetch a URL from this app, please ensure that there are twice as many workers as your expected concurrent connections.");
			}
		} elsif ( $max_clients > 1 ) {
			$self->app->log->info("[$$] App is prefork'd.  When served by a single-process daemon please ensure that the maximum number of concurrent clients is greater than 1.");
		}
	}
	my $sleep = $self->param('sleep');
	$self->app->log->info("[$$] Now, excuse me while I [$$] fetch another URL.\nI will not block; I [$$] will process other requests until* I get a response from the URL I requested and I will then precede to render my response to you.\n* (or until I timeout and give up)");
	$self->ua->get("$me/$sleep" => json => {block=>0, caller=>$$} => sub { # Non-blocking
		# This callback will be processed once a response is supplied to get
		my ($ua, $tx) = @_;
		my $sleeper = $tx->res->json->{sleeper};
		$self->app->log->info("[$$] A response from the URL [$sleeper] fetched $sleep seconds ago has been returned to me [$$] and I am now rendering my response.");
		$self->render(text => $sleep);
	});
	# Reaches here immediately after sending the get request; allows handling of additional requests before rendering of this route response occurs
	$self->app->log->info("[$$] The URL I requested is being fetched right now.  Because you requested to not block, max_clients must be set to greater than 1 and therefore I can process additional requests while I wait for a response from that URL.");
	$self->render_later; # Keep this route from generating an automatic response
};
 
# This route is to emulate a slow web request
get '/:sleep' => {sleep => 0} => sub {
	my $self = shift;
	my $sleep = $self->param('sleep');
	my ($block, $caller) = map { $self->req->json->{$_} } qw/block caller/;
	$self->app->log->info("[$$] I am a URL being fetched by $caller.  I'm about to do something that will take $sleep seconds.");
	return $self->render(json=>{ok => Mojo::JSON->false, sleep => $sleep, caller => $caller, pid => $$}) unless $sleep; # 0 second sleep so just do it
	$self->render_later; # Disable automatic rendering to delay response generation, only necessary if automatic rendering would result in a response.
	Mojo::IOLoop->timer($sleep => sub {
		# This callback will be processed once a the timer is reached
		$self->app->log->info("[$$] It turns out I was just supposed to sleep for $sleep seconds; rendering my response back to $caller now.");
		return $self->render(json=>{ok => Mojo::JSON->true, sleep => $sleep, caller => $caller, sleeper => $$});
	});
	# Reaches here immediately after setting the timer; allows handling of additional requests before rendering of this route response occurs
	# render_later keeps this route from generating an automatic response.
	if ( $block ) {
		$self->app->log->info("[$$] That thing I'm supposed to be doing is getting done right now.  Because you requested to block, max_clients must be set to 1 and therefore I cannot process any additional requests while that thing I'm supposed to be doing is getting done.  Sorry.  Don't request to block!");
	} else {
		$self->app->log->info("[$$] That thing I'm supposed to be doing is getting done right now.  Because you requested to not block, max_clients must be set to greater than 1 and therefore I can process additional requests while that thing I'm supposed to be doing is getting done.  Yeah!  Good for you requesting to not block!");
	}
};

app->start(@ARGV, '-l', $me);

package MyApp;

sub message {
	my $message = shift;
	local %_ = (
		'blocktest worker' => 'This route is disabled when served by a single-process worker or daemon because multiple concurrent connections cannot be handled by a single process when there is an operation that blocks.',
		'blocktest max_clients' => 'This route is disabled when max_clients is not 1.\nWhen greater than 1 the Manager will direct subsequent app requests to workers in a block state.  However, when 1, as is required to access this route, the Manager will not direct any additional requests to a worker that already has a connection with a client and will instead find an available worker to connect to.',
		'blocktest workers max_client' => 'Number of workers is %s and max_clients is %s.  There should be as many workers as you expect concurrent connections.  For this study, because the routes fetch a URL from this very app, please ensure that there are twice as many workers as your expected concurrent connections because one process will be busy handling the test case while another process is busy representing a slow http request.',
	);
	return sprintf(($_{$message}||$message), @_);
}

package Mojolicious::Command::daemon;
use Mojo::Base 'Mojolicious::Command';

use Getopt::Long qw(GetOptionsFromArray :config no_auto_abbrev no_ignore_case);
use Mojo::Server::Daemon;

has description => "Start application with HTTP and WebSocket server.\n";
has usage       => <<EOF;
usage: $0 daemon [OPTIONS]

These options are available:
  -b, --backlog <size>         Listen backlog size, defaults to SOMAXCONN.
  -c, --clients <number>       Maximum number of concurrent clients, defaults
                               to 1000.
  -g, --group <name>           Group name for process.
  -i, --inactivity <seconds>   Inactivity timeout, defaults to the value of
                               MOJO_INACTIVITY_TIMEOUT or 15.
  -l, --listen <location>      One or more locations you want to listen on,
                               defaults to the value of MOJO_LISTEN or
                               "http://*:3000".
  -p, --proxy                  Activate reverse proxy support, defaults to
                               the value of MOJO_REVERSE_PROXY.
  -r, --requests <number>      Maximum number of requests per keep-alive
                               connection, defaults to 25.
  -u, --user <name>            Username for process.
EOF

sub run {
  my ($self, @args) = @_;

  $::server = Mojo::Server::Daemon->new(app => $self->app);
  GetOptionsFromArray \@args,
    'b|backlog=i'    => sub { $::server->backlog($_[1]) },
    'c|clients=i'    => sub { $::server->max_clients($_[1]) },
    'g|group=s'      => sub { $::server->group($_[1]) },
    'i|inactivity=i' => sub { $::server->inactivity_timeout($_[1]) },
    'l|listen=s'     => \my @listen,
    'p|proxy' => sub { $ENV{MOJO_REVERSE_PROXY} = 1 },
    'r|requests=i' => sub { $::server->max_requests($_[1]) },
    'u|user=s'     => sub { $::server->user($_[1]) };

  $::server->listen(\@listen) if @listen;
  $::server->run;
}

package Mojolicious::Command::prefork;
use Mojo::Base 'Mojolicious::Command';

use Getopt::Long qw(GetOptionsFromArray :config no_auto_abbrev no_ignore_case);
use Mojo::Server::Prefork;

has description =>
  "Start application with preforking HTTP and WebSocket server.\n";
has usage => <<EOF;
usage: $0 prefork [OPTIONS]

These options are available:
  -A, --accepts <number>               Number of connections for workers to
                                       accept, defaults to 1000.
  -a, --accept-interval <seconds>      Accept interval, defaults to 0.025.
  -b, --backlog <size>                 Listen backlog size, defaults to
                                       SOMAXCONN.
  -c, --clients <number>               Maximum number of concurrent clients,
                                       defaults to 1000.
  -G, --graceful-timeout <seconds>     Graceful timeout, defaults to 20.
  -g, --group <name>                   Group name for process.
      --heartbeat-interval <seconds>   Heartbeat interval, defaults to 5.
  -H, --heartbeat-timeout <seconds>    Heartbeat timeout, defaults to 20.
  -i, --inactivity <seconds>           Inactivity timeout, defaults to the
                                       value of MOJO_INACTIVITY_TIMEOUT or 15.
      --lock-file <path>               Path to lock file, defaults to a random
                                       file.
  -L, --lock-timeout <seconds>         Lock timeout, defaults to 1.
  -l, --listen <location>              One or more locations you want to
                                       listen on, defaults to the value of
                                       MOJO_LISTEN or "http://*:3000".
      --multi-accept <number>          Number of connection to accept at once,
                                       defaults to 50.
  -P, --pid-file <path>                Path to process id file, defaults to a
                                       random file.
  -p, --proxy                          Activate reverse proxy support,
                                       defaults to the value of
                                       MOJO_REVERSE_PROXY.
  -r, --requests <number>              Maximum number of requests per
                                       keep-alive connection, defaults to 25.
  -u, --user <name>                    Username for process.
  -w, --workers <number>               Number of workers, defaults to 4.
EOF

sub run {
  my ($self, @args) = @_;

  $::server = Mojo::Server::Prefork->new(app => $self->app);
  GetOptionsFromArray \@args,
    'A|accepts=i'           => sub { $::server->accepts($_[1]) },
    'a|accept-interval=f'   => sub { $::server->accept_interval($_[1]) },
    'b|backlog=i'           => sub { $::server->backlog($_[1]) },
    'c|clients=i'           => sub { $::server->max_clients($_[1]) },
    'G|graceful-timeout=i'  => sub { $::server->graceful_timeout($_[1]) },
    'g|group=s'             => sub { $::server->group($_[1]) },
    'heartbeat-interval=i'  => sub { $::server->heartbeat_interval($_[1]) },
    'H|heartbeat-timeout=i' => sub { $::server->heartbeat_timeout($_[1]) },
    'i|inactivity=i'        => sub { $::server->inactivity_timeout($_[1]) },
    'lock-file=s'           => sub { $::server->lock_file($_[1]) },
    'L|lock-timeout=f'      => sub { $::server->lock_timeout($_[1]) },
    'l|listen=s'     => \my @listen,
    'multi-accept=i' => sub { $::server->multi_accept($_[1]) },
    'P|pid-file=s'   => sub { $::server->pid_file($_[1]) },
    'p|proxy'        => sub { $ENV{MOJO_REVERSE_PROXY} = 1 },
    'r|requests=i' => sub { $::server->max_requests($_[1]) },
    'u|user=s'     => sub { $::server->user($_[1]) },
    'w|workers=i'  => sub { $::server->workers($_[1]) };

  $::server->listen(\@listen) if @listen;
  $::server->run;
}

